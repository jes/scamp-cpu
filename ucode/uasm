#!/usr/bin/perl

# Microcode assembler

use strict;
use warnings;

my $MAX_OPCODE = 255;
my $T_STATES = 8;

my %is_alu = map { $_ => 1 } qw(EX NX EY NY F NO);
my %is_busout = map { $_ => 1 } qw(PO IOH IOL MO DO);
my %is_busin = map { $_ => 1 } qw(AI MI II XI YI DI);
my %is_jmp = map { $_ => 1 } qw(JC JZ JNZ JGT JLT JMP);

my %ucode = (
    EO  => 0x8000,

    EX  => 0x4000,
    NX  => 0x2000,
    EY  => 0x1000,
    NY  => 0x0800,
    F   => 0x0400,
    NO  => 0x0200,

    PO  => 0x0000,
    IOH => 0x1000,
    IOL => 0x2000,
    MO  => 0x3000,
    DO  => 0x6100, # 0x6000 for the bus_out decoder (to trigger the LED), 0x0100 for the actual signal
    RT  => 0x0002,
    'P+'=> 0x0400,

    AI  => 0x0020,
    II  => 0x0040,
    MI  => 0x0060,
    XI  => 0x0080,
    YI  => 0x00a0,
    DI  => 0x00c1, # 0x00c0 for the bus_in decoder (to trigger the LED), 0x0001 for the actual signal

    JC  => 0x0002,
    JZ  => 0x0010,
    JNZ => 0x000c,
    JGT => 0x0008,
    JLT => 0x0004,

    JMP => 0x001c, # JLT | JGT | JZ
);

my %alu = (
    "XO" => "EX F",
    "YO" => "EY F",
    "-2" => "NX NY F",
    "-1" => "NO",
    "0" => "",
    "1" => "NX NY F NO",
    "X-1" => "EX NY F",
    "X" => "EX F",
    "X+1" => "EX NX NY F NO",
    "-X-2" => "EX NX NY F",
    "-X-1" => "EX F NO", # == ~X
    "-X" => "EX NY F NO",
    "Y-1" => "NX EY F",
    "Y" => "EY F",
    "Y+1" => "NX EY NY F NO",
    "-Y-2" => "NX EY NY F",
    "-Y-1" => "EY F NO", # == ~Y
    "-Y" => "NX EY F NO",
    "X+Y" => "EX EY F",
    "Y+X" => "EX EY F",
    "X+Y+1" => "EX NX EY NY F NO",
    "Y+X+1" => "EX NX EY NY F NO",
    "X-Y-1" => "EX EY NY F",
    "X-Y" => "EX NX EY F NO",
    "Y-X-1" => "EX NX EY F",
    "Y-X" => "EX EY NY F NO",
    "-X-Y-2" => "EX NX EY NY F",
    "-Y-X-2" => "EX NX EY NY F",
    "-X-Y-1" => "EX EY F NO",
    "-Y-X-1" => "EX EY F NO",
    "~X" => "EX F NO",
    "~Y" => "EY F NO",
    "X&Y" => "EX EY",
    "Y&X" => "EX EY",
    "X|Y" => "EX NX EY NY NO",
    "Y|X" => "EX NX EY NY NO",
    "X&~Y" => "EX EY NY",
    "~Y&X" => "EX EY NY",
    "X|~Y" => "EX NX EY NO",
    "~Y|X" => "EX NX EY NO",
    "~X|Y" => "EX EY NY NO",
    "Y|~X" => "EX EY NY NO",
    "~X&Y" => "EX NX EY",
    "Y&~X" => "EX NX EY",
    "~X&~Y" => "EX NX EY NY",
    "~(X|Y)" => "EX NX EY NY",
    "~Y&~X" => "EX NX EY NY",
    "~(Y|X)" => "EX NX EY NY",
    "~X|~Y" => "EX EY NO",
    "~(X&Y)" => "EX EY NO",
    "~Y|~X" => "EX EY NO",
    "~(Y&X)" => "EX EY NO",
);

my $opcode = -1;
my $mnemonic;

my @ucode;

while (<>) {
    chomp;
    s/#.*//; # strip comments
    s/^\s+//; # strip leading spaces
    s/\s$//; # strip trailing spaces
    s/\s+/ /; # collapse spaces

    next if $_ eq '';

    if (/^([a-z_0-9, \(\)\+-]+): ?([0-9a-f]*)$/i) { # new instruction starts
        $mnemonic = $1;
        $opcode++;
        die "line $.: too many opcodes: >$MAX_OPCODE\n" if $opcode > $MAX_OPCODE;

        # TODO: accept non-contiguous opcode (i.e. gaps)
        die "line $.: wrong opcode for $1: expected 0x$2, found $opcode\n" if $2 ne '' && $opcode!=hex($2);

        die "line $.: initial instructions are unlabelled\n" if @ucode && $opcode == 0;
        emit_ucode(@ucode) if $opcode != 0;
        @ucode = ();
    } else {
        my $uinstr = encode($_);
        push @ucode, $uinstr;
    }
}

die "opcode == -1 (maybe label your instructions?)" if $opcode == -1;

emit_ucode(@ucode);

# empty ucode is a no-op
@ucode = ();

# pad the rest of the microcode space with "long nops", this is needed so that
# illegal instructions have the "fetch" ucode in them
emit_ucode(@ucode) for ($opcode+1 .. $MAX_OPCODE);

sub encode {
    my ($uinstr) = @_;

    my @bits = split / /, $uinstr;

    my $have_busin;
    my $have_busout;
    my $have_alu;
    my $have_jmp;

    # append bits that form alu controls
    my @alu_bits;
    for my $b (@bits) {
        if (exists $alu{$b}) {
            $have_alu = 1;
            push @alu_bits, "EO", split / /, $alu{$b};
        }
    }

    push @bits, @alu_bits;

    my $num = 0;
    for my $b (@bits) {
        next if exists $alu{$b}; # skip these bits, we already appended them
        die "line $.: unrecognised ucode: $b" if !exists $ucode{$b};
        $num |= $ucode{$b};

        if ($is_busin{$b}) {
            die "line $.: multiple busin bits: $uinstr\n" if $have_busin;
            $have_busin = 1;
        }
        if ($is_busout{$b}) {
            die "line $.: multiple busout bits: $uinstr\n" if $have_busout;
            die "line $.: busout conflicting with ALU: $uinstr\n" if $have_alu;
            $have_busout = 1;
        }
        if ($is_alu{$b}) {
            die "line $.: ALU conflicting with busout: $uinstr\n" if $have_busout;
            $have_alu = 1;
        }
        $have_jmp = 1 if $is_jmp{$b};
    }

    die "line $.: ALU bits without EO: $uinstr\n" if $have_alu && $uinstr !~ /\bEO\b/ && !@alu_bits;

    die "line $.: P+ with ALU not allowed: $uinstr\n" if $have_alu && $uinstr =~ /\bP\+/;

    warn "line $.: busout with no busin probably makes no sense: $uinstr\n" if ($have_busout && !$have_busin && !$have_jmp && $mnemonic ne 'slownop');
    warn "line $.: busin with no busout probably makes no sense (will get PC on bus, please specify 'PO'): $uinstr\n" if ($have_busin && !$have_busout && !$have_alu);

    # the "EO" bit is active-low, so needs toggling:
    $num ^= $ucode{EO};

    return $num;
}

sub emit_ucode {
    my (@ucode) = @_;

    # confusing: always fetch the next instruction and increment PC, regardless of whatever
    # the last instruction was
    unshift @ucode, encode("PO AI"), encode("MO II P+");

    # pad the rest of the ucode with "reset t-state" microcode
    push @ucode, encode("RT") while @ucode < $T_STATES;

    die "line $.: too many microinstructions: $mnemonic" if @ucode > $T_STATES;

    print sprintf("%04x\n", $_) for @ucode;
}
