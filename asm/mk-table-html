#!/usr/bin/perl

use strict;
use warnings;

use FindBin;
use JSON qw(decode_json);

my $instructions_json;
my $instructions = load_instructions();
my %op2inst = map { $instructions->{$_}{opcode} => $_ } keys %$instructions;

my %clobsym = (x => '!', y => '^', flags => '+');

my %uses_alu = map { $_ => 1 } (
    "-2", "-1", "0", "1", "X-1", "X", "X+1", "-X-2", "-X-1", "-X", "Y-1", "Y", "Y+1",
    "-Y-2", "-Y-1", "-Y", "X+Y", "Y+X", "X+Y+1", "Y+X+1", "X-Y-1", "X-Y", "Y-X-1", "Y-X",
    "-X-Y-2", "-Y-X-2", "-X-Y-1", "-Y-X-1", "~X", "~Y", "X&Y", "Y&X", "X|Y", "Y|X",
    "X&~Y", "~Y&X", "X|~Y", "~Y|X", "~X|Y", "Y|~X", "~X&Y", "Y&~X", "~X&~Y", "~(X|Y)",
    "~Y&~X", "~(Y|X)", "~X|~Y", "~(X&Y)", "~Y|~X", "~(Y&X)", "XO", "YO"
);

print header();
print "<table>\n";
print "<tr><td></td>";
print "<th>_$_</th>" for (qw(0 1 2 3 4 5 6 7 8 9 a b c d e f));
print "</tr>\n";
for my $a (qw(0 1 2 3 4 5 6 7 8 9 a b c d e f)) {
    print "<tr><th>${a}_</th>";
    for my $b (qw(0 1 2 3 4 5 6 7 8 9 a b c d e f)) {
        my $opcode = "$a$b";
        my $inst = $op2inst{hex($opcode)}||'';
        my $i = $instructions->{$inst};

        $inst =~ s/\(i8h\)/r/g;
        $inst =~ s/\(65534\)/r254/g;
        $inst =~ s/\(65535\)/sp/g;

        my @clobbers = @{ $i->{clobbers}||[] };
        @clobbers = grep {!/x/} @clobbers if $inst =~ /^\S+ x\b/;
        @clobbers = grep {!/x/} @clobbers if $inst =~ /x\+\+/;
        @clobbers = grep {!/y/} @clobbers if $inst =~ /^\S+ y\b/;

        my $clobbers_flags = 0;
        my @ucode;
        for my $uinstr (@{ $i->{ucode}||[] }) {
            my @uops;
            for my $uop (split /\s+/, $uinstr) {
                if ($uses_alu{$uop}) {
                    $uop = "<span class=\"clobflags\">$uop</span>";
                    $clobbers_flags = 1;
                }
                push @uops, $uop;
            }
            push @ucode, join(' ', @uops);
        }
        my $microcode = join('<br>', map { s/&/&amp;/g; "&nbsp;&nbsp;$_" } @ucode);
        push @clobbers, 'flags', if $clobbers_flags;

        my $clobber_warnings = join('', map { "<span class=\"clob$_\">" . ($clobsym{$_}||'*') . "</span>" } sort @clobbers);
        @clobbers = ('(none)') if !@clobbers;
        my $clobbers = join(',', map { "<span class=\"clob$_\">$_</span>" } sort @clobbers);

        my $remark = $i->{remark}||'';

        my ($instop, $instargs) = split / /, $inst, 2;
        $instop ||= '';
        $instargs ||= '';

        my $instopcss = $instop;
        $instopcss = 'j' if $instop =~ /^j/;
        $instopcss = 'tbsz' if $instop eq 'sb';

        $i->{words} ||= '';
        $i->{cycles} ||= '';

        print "<td class=\"inst inst-$instopcss\"><div style=\"padding:2px\"><span style=\"font-weight:bold\">$instop</span> $instargs $clobber_warnings</div><div class=\"popup\"><b>Opcode:</b> $opcode<br><b>Words:</b> $i->{words}<br><b>Cycles:</b> $i->{cycles}<br><b>Clobbers:</b> $clobbers<b><br>Microcode:</b><br>$microcode<br><span class=\"remark\">$remark</span></div></td>\n";
    }
    print "</tr>\n";
}
print "</table>\n";
print "<div class=\"clobflags\"><tt>$clobsym{flags}</tt> sets <tt>flags</tt></div>\n";
print "<div class=\"clobx\"><tt>$clobsym{x}</tt> clobbers <tt>x</tt></div>\n";
print "<div class=\"clobr254\"><tt>*</tt> clobbers <tt>r254</tt></div>\n";
print "<div class=\"cloby\"><tt>$clobsym{y}</tt> clobbers <tt>y</tt></div>\n";
print footer();

sub header {
    qq{<html>
<head>
<title>SCAMP Instruction Set Cheatsheet</title>
<style type="text/css">
body {
    font-family: sans-serif;
}
table {
    margin-right: 150px;
    font-size: 1.0em;
    font-family: monospace;
}
td {
    background-color: #ccc;
    color: black;
    padding: 2px;
    vertical-align: top;
}
td.inst-add { background-color: #dcc; }
td.inst-cmp { background-color: #dbb; }
td.inst-inc { background-color: #cbb; }
td.inst-sub { background-color: #cdc; }
td.inst-dec { background-color: #bcb; }
td.inst-and { background-color: #ccd; }
td.inst-not { background-color: #dcb; }
td.inst-test { background-color: #bdd; }
td.inst-neg { background-color: #dbd; }
td.inst-or { background-color: #ddc; }
td.inst-nand { background-color: #cdd; }
td.inst-nor { background-color: #dcd; }
td.inst-xor { background-color: #bcd; }
td.inst-in { background-color: #cbc; }
td.inst-out { background-color: #bdc; }
td.inst-ld { background-color: #bcc; }
td.inst-push, td.inst-pop { background-color: #bbc; }
td.inst-j { background-color: #ccb; }
td.inst-shl, td.inst-shl2, td.inst-shl3 { background-color: #cbd; }
td.inst-tbsz { background-color: #cdb; }
td.inst-call, td.inst-ret { background-color: #dbc; }

td.inst:hover {
    background-color: #eee;
}
td.inst:hover div.popup {
    display: block;
}
td.inst div.popup {
    display:none;
}
div.popup {
    pointer-events: none;
    position: absolute;
    background: #eee;
    width: 200px;
    padding: 2px;
}
th {
    background-color: #333;
    color: white;
    padding: 2px;
}
.clobflags {
    color: #080;
}
.clobr254 {
    color: #a50;
}
.clobx {
    color: #f00;
    font-weight: bold;
}
.cloby {
    color: #888;
}
.remark {
    font-family: sans-serif;
    font-size: 0.8em;
}
tt {
    font-weight: bold;
    font-size: 1.2em;
}
</style>
</head>
<body>
<h1>SCAMP Instruction Set Cheatsheet</h1>
<ul>
<li>The instruction word is the opcode shifted left by 8 bits, so opcode <tt>06</tt> becomes <tt>0600</tt>.</li>
<li>Typically the first parameter is the destination and first operand, and the second parameter is the other operand.</li>
<li><tt>i8l</tt> and <tt>i8h</tt> parameters are stored in the lower 8 bits of the instruction word, so <tt>add x, 5</tt> becomes
<tt>0605</tt>. <tt>i8h</tt> is the same as <tt>i8l</tt> except it sets the upper 8 bits to 1, so <tt>add x, 0xff05</tt> becomes <tt>0705</tt>.</li>
<li>Side effects on <tt>flags</tt>, <tt>x</tt>, <tt>r254</tt>, or <tt>y</tt> are documented as "clobbers".</li>
<li><tt>++</tt> and <tt>--</tt> refer to pre-/post- increment/decrement of a value or pointer.</li>
</ul>
};
}

sub footer {
    qq{<ul>
<li>The <tt>x</tt> register functions as an accumulator.</li>
<li>The <tt>y</tt> register is only exposed for the <tt>xor x, y</tt> instruction, because
<tt>xor x, r</tt> would take too many cycles.</li>
<li><tt>r</tt> parameters are "pseudo-registers", which are any word in the top 256 words of memory, equivalent to <tt>(i8h)</tt>.
They can also be used via <tt>(i16)</tt> parameters.
<tt>r0</tt> is the same as <tt>(0xff00)</tt>, <tt>r1</tt> is <tt>(0xff01)</tt>, and so on.</li>
<li><tt>r0</tt> to <tt>r253</tt> are free for general purposes.</li>
<li><tt>r254</tt> is used as scratch space for <tt>xor</tt>, as the operand for <tt>sb</tt>, and to pass the return address for <tt>call</tt>/<tt>ret</tt>.</li>
<li><tt>r255</tt> is the stack pointer, also called <tt>sp</tt>.</li>
<li>The <tt>flags</tt> are set/reset whenever the ALU is used. The <tt>Z</tt> flag is set when the ALU output is 0. The <tt>LT</tt> flag is set when the ALU output
is less than 0, i.e. when the most-significant bit of the output is 1.</li>
</ul></body>
</html>
};
}

sub load_instructions {
    my $file = $FindBin::Bin . "/instructions.json";
    open(my $fh, '<', $file)
        or die "can't read $file: $!";
    $instructions_json = join('', <$fh>);
    close $fh;
    return decode_json($instructions_json);
}
