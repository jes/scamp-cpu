#!/usr/bin/perl

# Assembler

use strict;
use warnings;

use Getopt::Long;
use JSON qw(decode_json);
use FindBin;

my $verbose = 0;
my $verbose_file;
my $asm_header;
my $slang_header;

GetOptions(
    'v|verbose' => \$verbose,
    'verbose-file=s' => \$verbose_file,
    'asm-header=s' => \$asm_header,
    'slang-header=s' => \$slang_header,
    'h|help' => sub { help(0) },
) or help(1);

my $instructions = load_instructions();
my %instrs_by_op;
for my $inst (keys %$instructions) {
    my $op = $inst;
    $op =~ s/ .*//g;
    push @{ $instrs_by_op{$op} }, $inst;
}

my %macro;
my @macros;
addmacro(sp => '(0xffff)');

my %label = ();
my $pc = 0;
my @code;

# add macros for ".def r0 (0xff00)" for 0..255
# TODO: maybe add a flag to turn off the the default macros?
for (0..255) {
    $macro{"r$_"} = 1;
}
push @macros, sub {
    my $s = shift; $s =~ s/\br(\d+)\b/sprintf("(0xff%02x)", $1)/ge; return $s;
};

while (my $line = <>) {
    chomp $line;

    my $orig_line = $line;

    # strip comments, whitespace
    $line =~ s/#.*// unless $line =~ /^\s*\.str/;
    $line =~ s/^\s+//;
    $line =~ s/\s+$//;

    # apply macro substitutions
    $line = $_->($line) for @macros;

    # resolve hex
    $line =~ s/\b0x([0-9a-f]+)\b/hex($1)/gei;

    # store labels
    while ($line =~ s/^([a-z_][a-z_0-9]*):\s*//i) {
        my $name = namearg($1);
        die "error: line $.: duplicate label name: $name\n" if exists $label{$name};
        $label{$name} = $pc;
    }

    if ($line eq '') {
        emit("__asm_annotation $orig_line");
        next;
    }

    emit("__asm_addr_$pc");

    my ($op, $args_str) = split /\s+/, $line, 2;
    my @args = split /\s*,\s*/, $args_str//'';

    if ($op eq '.d' || $op eq '.def') {
        @args = split /\s+/, $args_str;
        params($op, 2, @args);
        my $name = namearg($args[0]);
        die "error: line $.: duplicate macro name: $name\n" if exists $macro{$name};
        $line =~ s/\s*$op\s*$name\s*//;
        addmacro($name, $line);
    } elsif ($op eq '.at') {
        params($op, 1, @args);
        my $at = numarg($args[0]);
        if ($pc != 0) {
            die "error: line $.: .at $at but we're already at $pc\n" if $at < $pc;
            emit(0x0000) for ($pc+1 .. $at);
        }
        $pc = $at;
    } elsif ($op eq '.g' || $op eq '.gap') {
        params($op, 1, @args);
        emit(0x0000) for (1 .. numarg($args[0]));
    } elsif ($op eq '.w' || $op eq '.word') {
        params($op, 1, @args);
        if ($args[0] =~ /^([a-z_][a-z_0-9]*)$/i) {
            emit($args[0]);
        } else {
            emit(numarg($args[0]));
        }
    } elsif ($op eq '.str') {
        my $str = $line;
        $str =~ s/^\s*.str\s*"//;
        $str =~ s/"\s*(#.*)?$//;
        $str =~ s/\\r/\r/g;
        $str =~ s/\\n/\n/g;
        $str =~ s/\\t/\t/g;
        $str =~ s/\\\[/\[/g;
        $str =~ s/\\x(..)/hex($1)/ge;
        $str =~ s/\\0/\0/g;
        $str =~ s/\\\\/\\/g;
        my @c = split //, $str;
        emit(ord($_)) for @c;
    } else {
        # turn the arguments into a pattern
        my @argpattern;
        for my $a (@args) {
            push @argpattern, arg2pattern($a);
        }
        my $re = "\Q$op\E";
        $re .= ' ' . join(', ', @argpattern) if @argpattern;

        # find instructions that match the pattern
        my @match;
        for my $i (@{ $instrs_by_op{$op}||[] }) {
            push @match, $i if $i =~ /^$re$/;
        }
        die "error: line $.: unrecognised operation: $line\n" if !@match;

        # sort the matches by cycle count, so we choose the fastest match;
        # we can get multiple matches in cases like "ld r0, r1" where
        # both "ld (i16), (i8h)" and "ld (i8h), (i16)" match
        # (we sort twice so that the ordering is always the same)
        @match = sort { $instructions->{$a}{cycles} <=> $instructions->{$b}{cycles} } sort @match;

        # generate code:
        #  - upper 8 bits of instruction come from opcode
        #  - lower 8 bits of instruction are i8l/i8h, if any,
        #    otherwise ignored (so 0)
        #  - the i16 argument comes next, if any
        #  - if we don't yet know the address for a label, just
        #    store the text and it'll get filled in later
        my $opcode = $instructions->{$match[0]}{opcode} << 8;
        my @operands;

        my ($instrop, $params_str) = split / /, $match[0], 2;
        my @params = split /\s*,\s*/, $params_str||'';

        for my $i (0 .. $#argpattern) {
            if ($params[$i] =~ /i8/) {
                $opcode |= arg2num($args[$i])&0xff;
            } elsif ($params[$i] =~ /i16/) {
                push @operands, arg2num($args[$i]);
            }
        }

        emit($opcode);
        emit($_) for @operands;
    }

    emit("__asm_annotation $orig_line");
}

write_output(
    code => \@code,
    verbose => $verbose,
    fh => \*STDOUT,
);

if ($verbose_file) {
    open(my $fh, '>', $verbose_file)
        or die "can't write $verbose_file: $!\n";
    write_output(
        code => \@code,
        verbose => 1,
        fh => $fh,
    );
}

# now create the asm header file, if any
if ($asm_header) {
    open(my $fh, '>', $asm_header)
        or die "can't write $asm_header: $!\n";
    for my $l (sort keys %label) {
        print $fh ".d $l " . sprintf("0x%04x", $label{$l}) . "\n" if $l =~ /^_/;
    }
    close $fh;
}

# now create the slang header file, if any
if ($slang_header) {
    open(my $fh, '>', $slang_header)
        or die "can't write $slang_header: $!\n";
    for my $l (sort keys %label) {
        (my $slang_l = $l) =~ s/^_//;
        print $fh "extern $slang_l;\n" if $l =~ /^_/;
    }
    close $fh;
}

# opts:
# - code: array of values
# - verbose: true if verbose (annotated) output wanted
# - fh: file handle to write to
sub write_output {
    my (%opts) = @_;

    my @code = @{ $opts{code} };
    my $verbose = $opts{verbose};
    my $fh = $opts{fh};

    my $chars_on_line = 0;

    # now turn the code into hex output
    for my $c (@code) {
        if ($c =~ /__asm_addr_(\d+)/) {
            if ($verbose) {
                print $fh sprintf("%04x:  ", $1);
                $chars_on_line += 7;
            }
            next;
        }
        if ($c =~ s/^__asm_annotation //) {
            if ($verbose) {
                print $fh " " for ($chars_on_line .. 17);
                print $fh "# $c\n";
                $chars_on_line = 0;
            }
            next;
        }

        if ($c !~ /^-?\d+$/) {
            die "error: label $c not found\n" if !exists $label{$c};
            $c = $label{$c};
        }
        $c = $c+65536 if $c < 0;
        die "error: $c out of range\n" if $c < 0 || $c > 0xffff;
        print $fh sprintf("%04x%s", $c, ($verbose ? ' ' : "\n"));
        $chars_on_line += 5;
    }
}

# examples:
# x => die
# (x) => die
# (65535)++ => 65535
# 605 => 605
# (val) => val
# 1((65535)) => 1
# 1(x) => 1
sub arg2num {
    my ($arg) = @_;

    die "error: line $.: can't convert register to number: $arg\n" if $arg =~ /^(x|y|pc)$/;

    return $1 if $arg =~ /(\d+)\(x\)/;
    return $1 if $arg =~ /(\d+)\(\(65535\)\)/;
    return $1 if $arg =~ /(\d+)\+\(65535\)/;

    # remove (, ), +, -
    $arg =~ s/[\(\)\+-]//g;

    return $arg;
}

# examples:
# x => x
# (x) => \(x\)
# (65535)++ => \((i8h|i16)\)\+\+
# 605 => i16
sub arg2pattern {
    my ($arg) = @_;

    # escape \, (, ), +
    $arg =~ s/([\\\(\)\+])/\\$1/g;

    my $subst = sub {
        my ($v) = @_;

        return $v if $v =~ /^(x|y|pc)$/;
        return "(i8h|i16|$v)" if $v =~ /^\d+$/ && $v >= 0xff00 && $v <= 0xffff;
        return "(i8l|i16|$v)" if $v =~ /^\d+$/ && $v >= 0x0000 && $v <= 0x00ff;
        return "(i16|$v)";
    };

    $arg =~ s/\b([a-z_0-9]+)\b/$subst->($1)/gei;

    return $arg;
}

sub namearg {
    my ($arg) = @_;
    die "error: line $.: invalid name: $arg\n" if $arg !~ /^[a-z_][a-z_0-9]*$/i;
    die "error: line $.: '$arg' is a reserved name\n" if $arg =~ /^(x|y)$/;
    return $arg;
}

sub numarg {
    my ($arg) = @_;
    my $val = $arg;
    my $neg = 1 if $val =~ s/^-//;
    $val = hex($1) if $val =~ /^0x([0-9a-f]+)$/i;
    die "error: line $.: invalid number: $arg\n" if $val !~ /^[0-9]+$/;
    return $neg ? -$val : $val;
}

sub params {
    my ($op, $n, @args) = @_;
    die "error: line $.: $op: expected $n arguments, found " . (scalar @args) . "\n" if @args != $n;
}

sub emit {
    my ($word) = @_;
    push @code, $word;
    $pc++ if $word !~ /^__asm/;
}

sub load_instructions {
    my $file = $FindBin::Bin . "/instructions.json";
    open(my $fh, '<', $file)
        or die "can't read $file: $!";
    my $c = join('', <$fh>);
    close $fh;
    return decode_json($c);
}

sub addmacro {
    my ($from, $to) = @_;

    die "duplicate macro: $from" if $macro{$from};
    $macro{$from} = 1;

    push @macros, eval('sub { my $s=shift; $s =~ s/\b' . "\Q$from\E" . '\b/' . "\Q$to\E" . '/g; return $s; }');
}

sub help {
    my ($rc) = @_;

    print qq{This is the SCAMP assembler.

Usage: asm [-v] < source.s > binary.hex

Options:

    -h,--help            Show this help.
    --asm-header FILE    Write asm label values beginning with underscore into FILE.
    --slang-header FILE  Write SLANG names beginning with underscore into FILE.
    -v,--verbose         Annotate the generated hex with the source.
    --verbose-file FILE  Write annotated hex (like with -v) into FILE.
};
    exit($rc);
}
