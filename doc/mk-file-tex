#!/usr/bin/perl

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/lib/";

use SLANG::Tex qw(texescape slurp template);

my $filename = shift or die "usage: mk-file-tex SRCFILE\n";

my $srcfile = slurp($filename);
my $file_template = slurp('lib-file-template.tex');
my $func_template = slurp('lib-function-template.tex');

$filename =~ s!^.*/!!g;

my $fields = {
    __FILENAME__ => $filename,
    __LIB_DESCR__ => texescape(libdescr($srcfile)),
};

print template($file_template, $fields);

for my $func (sort { $a->{name} cmp $b->{name} } funcs($srcfile)) {
    $fields->{__FUNCTION__} = texescape($func->{name});
    $fields->{__FUNCTION_DEF__} = texescape($func->{def});
    $fields->{__FUNCTION_DESCR__} = texescape($func->{descr});
    print template($func_template, $fields);
}

sub libdescr {
    my ($src) = @_;
    my @lines = split /\n/, $src;
    my $descr = '';
    while (my $l = shift @lines){
        last unless $l =~ s/^\s*#\s*//;
        $descr .= $l . "\n\n";
    }
    return $descr;
}

sub funcs {
    my ($src) = @_;
    my @lines = split /\n/, $src;
    my @funcs;
    my $comment = '';
    for my $l (@lines) {
        if ($l =~ /^\s*(?:var)?\s*([a-zA-Z0-9_]+)\s*=\s*func/) {
            my $name = $1;
            $l =~ s/\).*/)/;
            $comment =~ s/^\s*//;
            push @funcs, {
                name => $name,
                def => $l,
                descr => $comment,
            } unless $name =~ /^_/;
        } elsif ($l =~ s/^#//) {
            $comment .= "\n\n" . $l;
        } else {
            $comment = '';
        }
    }
    return @funcs;
}
