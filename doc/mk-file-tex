#!/usr/bin/perl

use strict;
use warnings;

my $filename = shift or die "usage: mk-file-tex SRCFILE\n";

my $srcfile = slurp($filename);
my $file_template = slurp('lib-file-template.tex');
my $func_template = slurp('lib-function-template.tex');

$filename =~ s!^.*/!!g;

my $fields = {
    __FILENAME__ => $filename,
    __LIB_DESCR__ => texescape(libdescr($srcfile)),
};

print template($file_template, $fields);

for my $func (sort { $a->{name} <=> $b->{name} } funcs($srcfile)) {
    $fields->{__FUNCTION__} = texescape($func->{name});
    $fields->{__FUNCTION_DEF__} = texescape($func->{definition});
    $fields->{__FUNCTION_DESCR__} = texescape($func->{descr});
    print template($func_template, $fields);
}

sub texescape {
    my ($str) = @_;
    $str =~ s/([_&])/\\$1/g;
    return $str;
}

sub libdescr {
    my ($src) = @_;
    my @lines = split /\n/, $src;
    my $descr = '';
    while (my $l = shift @lines){
        last unless $l =~ s/^\s*#\s*//;
        $descr .= $l . "\n";
    }
    return $descr;
}

sub funcs {
    my ($src) = @_;
    my @lines = split /\n/, $src;
    my @funcs;
    for my $l (@lines) {
        if ($l =~ /^\s*(?:var)?\s*([a-zA-Z0-9_]+)\s*=\s*func/) {
            push @funcs, {
                name => $1,
                def => $l,
                descr => 'mysterious',
            };
        }
    }
    return @funcs;
}

sub template {
    my ($tmpl, $fields) = @_;
    for my $f (keys %$fields) {
        $tmpl =~ s/$f/$fields->{$f}/g;
    }
    return $tmpl;
}

sub slurp {
    my ($name) = @_;
    open(my $fh, '<', $name)
        or die "can't read $name: $!\n";
    my $c = join('', <$fh>);
    close $fh;
    return $c;
}
